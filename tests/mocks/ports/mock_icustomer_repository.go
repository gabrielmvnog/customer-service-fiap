// Code generated by MockGen. DO NOT EDIT.
// Source: src/application/ports/icustomer_repository.go
//
// Generated by this command:
//
//	mockgen -source=src/application/ports/icustomer_repository.go -destination=tests/mocks/ports/mock_icustomer_repository.go
//

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/gabrielmvnog/customer-service-fiap/src/domain/models"
	gomock "go.uber.org/mock/gomock"
)

// MockICustomerRepository is a mock of ICustomerRepository interface.
type MockICustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICustomerRepositoryMockRecorder
	isgomock struct{}
}

// MockICustomerRepositoryMockRecorder is the mock recorder for MockICustomerRepository.
type MockICustomerRepositoryMockRecorder struct {
	mock *MockICustomerRepository
}

// NewMockICustomerRepository creates a new mock instance.
func NewMockICustomerRepository(ctrl *gomock.Controller) *MockICustomerRepository {
	mock := &MockICustomerRepository{ctrl: ctrl}
	mock.recorder = &MockICustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICustomerRepository) EXPECT() *MockICustomerRepositoryMockRecorder {
	return m.recorder
}

// FindCustomerByDocumentNumber mocks base method.
func (m *MockICustomerRepository) FindCustomerByDocumentNumber(arg0 string) (*domain.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCustomerByDocumentNumber", arg0)
	ret0, _ := ret[0].(*domain.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCustomerByDocumentNumber indicates an expected call of FindCustomerByDocumentNumber.
func (mr *MockICustomerRepositoryMockRecorder) FindCustomerByDocumentNumber(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCustomerByDocumentNumber", reflect.TypeOf((*MockICustomerRepository)(nil).FindCustomerByDocumentNumber), arg0)
}

// InsertCustomer mocks base method.
func (m *MockICustomerRepository) InsertCustomer(arg0 *domain.Customer) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCustomer", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// InsertCustomer indicates an expected call of InsertCustomer.
func (mr *MockICustomerRepositoryMockRecorder) InsertCustomer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCustomer", reflect.TypeOf((*MockICustomerRepository)(nil).InsertCustomer), arg0)
}
