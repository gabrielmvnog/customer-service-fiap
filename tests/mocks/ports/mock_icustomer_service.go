// Code generated by MockGen. DO NOT EDIT.
// Source: src/application/ports/icustomer_service.go
//
// Generated by this command:
//
//	mockgen -source=src/application/ports/icustomer_service.go -destination=tests/mocks/ports/mock_icustomer_service.go
//

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	dtos "github.com/gabrielmvnog/customer-service-fiap/src/user-interface/dtos"
	gomock "go.uber.org/mock/gomock"
)

// MockICustomerService is a mock of ICustomerService interface.
type MockICustomerService struct {
	ctrl     *gomock.Controller
	recorder *MockICustomerServiceMockRecorder
	isgomock struct{}
}

// MockICustomerServiceMockRecorder is the mock recorder for MockICustomerService.
type MockICustomerServiceMockRecorder struct {
	mock *MockICustomerService
}

// NewMockICustomerService creates a new mock instance.
func NewMockICustomerService(ctrl *gomock.Controller) *MockICustomerService {
	mock := &MockICustomerService{ctrl: ctrl}
	mock.recorder = &MockICustomerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICustomerService) EXPECT() *MockICustomerServiceMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockICustomerService) CreateCustomer(arg0 *dtos.CreateCustomerRequest) *dtos.CreateCustomerResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0)
	ret0, _ := ret[0].(*dtos.CreateCustomerResponse)
	return ret0
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockICustomerServiceMockRecorder) CreateCustomer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockICustomerService)(nil).CreateCustomer), arg0)
}
